# {{npmName}}

JavaScript/Typescript client for {{projectName}} service.

- API version: {{appVersion}}
- Package version: {{npmVersion}}{{#npmSnapshot}}-SNAPSHOT.{{.}}{{/npmSnapshot}}
{{^hideGenerationTimestamp}}
- Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}

{{#infoUrl}}
For more information, please visit [{{{infoUrl}}}]({{{infoUrl}}})
{{/infoUrl}}

## Installation

* [Configure your NPM repository]({{npmRepository}}/#npmyarn---nodejs--typescript) to point to the GitHub package repository
* Run NPM or Yarn installation:

```shell
npm install --save {{{npmName}}}
```

## Using Generated API Clients

All URIs are relative to *{{basePath}}*, this can however be overwritten by changing the configuration.

## API Client Configuration
The example below shows how to create configuration file for your API clients. The preferred way to specify auth token is by using the [Authenticator class](https://github.com/NestcoinCo/artifacts/tree/dev/nodejs-libs/service-authenticator#using-authenticator-with-api-clients) from the service-authenticator package to instantiate API clients.

```typescript
// config.ts
import {{{moduleName}}} from '{{{npmName}}}';
// alternative: import { Configuration } from '{{{npmName}}}';

export const config = new {{{moduleName}}}.Configuration();

// set new basePath, if ONLY you wish to override default basePath set in SDK, e.g. for development environment.
config.basePath = 'https://my-custom-api-base.reit-africa.com';

{{#authMethods}}
{{#last}}// define authentication for API{{/last}}
// auth: {{name}}
{{#isApiKey}}
// API Key authentication, e.g. auth token.
config.apiKey = '_AUTH_TOKEN_';
/**
 * alternatively, you can specify a function, that returns Promise<string>, where, the promise resolves
 * to a valid apiKey
 */
config.apiKey = async () => authTokenProvider.getToken();
{{/isApiKey}}
{{#isBasic}}
{{#isBasicBasic}}
// Basic auth, define username and password.
config.username = 'userName';
config.password = 'some-password';
{{/isBasicBasic}}
{{#isBasicBearer}}
// bearer token, specify bearer token
config.accessToken = '_BEARER TOKEN_';
/**
* alternatively, you can specify a function, that returns Promise<string>, where, the promise resolves
* to a valid accessToken
* e.g.
*/
config.accessToken = async () => authTokenProvider.getToken();
{{/isBasicBearer}}
{{/isBasic}}
{{/authMethods}}
```

## Summary of API Operations
Below is a list of API operations, which are available within {{{projectName}}} service.

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}**{{moduleName}}.{{classname}}** | [**{{operationId}}**](#{{operationId}}) | **{{httpMethod}}** {{path}} | {{summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

{{#apiInfo}}{{#apis}}
{{>api_doc}}
{{/apis}}{{/apiInfo}}


## API Models
This is a list of available API models.

{{#models}}
{{>model_doc}}
{{/models}}

## Documentation for Authorization

{{^authMethods}}
All endpoints do not require authorization.
{{/authMethods}}
{{#authMethods}}
{{#last}} Authentication schemes defined for the API:{{/last}}

### {{name}}

{{#isApiKey}}

- **Type**: API key
- **API key parameter name**: {{keyParamName}}
- **Location**: {{#isKeyInQuery}}URL query string{{/isKeyInQuery}}{{#isKeyInHeader}}HTTP header{{/isKeyInHeader}}
{{/isApiKey}}
{{#isBasic}}
{{#isBasicBasic}}
- **Type**: HTTP basic authentication
{{/isBasicBasic}}
{{#isBasicBearer}}
- **Type**: Bearer authentication{{#bearerFormat}} ({{{.}}}){{/bearerFormat}}
{{/isBasicBearer}}
{{/isBasic}}
{{#isOAuth}}

- **Type**: OAuth
- **Flow**: {{flow}}
- **Authorization URL**: {{authorizationUrl}}
- **Scopes**: {{^scopes}}N/A{{/scopes}}
{{#scopes}}  - {{scope}}: {{description}}
{{/scopes}}
{{/isOAuth}}

{{/authMethods}}
